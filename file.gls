
let println = fn x {
    print(x);
    print("\n");
};
let test = fn x { print("" + x + " "); x };

let prev = obj Test1 {
    shout2 = fn a, b {
        print("shouting " + a);
        println(" and " + b);
    };
};
let test2 = obj Test2 as prev {
    shout3 = fn a, b, c {
        print("shouting " + a);
        print(" and " + b);
        println(" and also " + c)
    };
    a = 2;
};
test2.shout3("hello " + "world", false, true);
test2.shout2("hi", None);
println("foo foo ");
false or print("foo ");
true or print("bar ");
true and print("foo ");
false and print("bar ");
println("");
let list = [1, 2, obj Test { name = "hello"; }];
println(list);
println(list[2]);
list[2] = "hello";
println(list[2]);

let list2d = [
    ["00", "10", "20"],
    ["01", "11", "21"],
    ["02", "12", "22"],
];

println(list2d);

println("foo foo ");

if true {
    print("foo ");
} elif true {
    print("bar ");
} else {
    print("bar ");
};

if false {
    print("bar ");
} elif true {
    print("foo ");
} else {
    print("bar ");
};

println("");

let make_test = fn name, test {
    fn {
        println("running test " + name);
        test()
    }
};

let make_ref = fn x {
    obj Ref {
        inner = x;
        get = fn self { self.inner };
        set = fn self, to { self.inner = to; };
        map = fn self, f { self.inner = f(self.inner) };
        apply = fn self, f { f(self.inner) };
    }
};

let gen_add = fn added {
    fn x {
        x + added
    }
};

let x = make_ref("hello");
x:set(x:get() + " world!");
x:map(gen_add(1));
println(x:get());

let tests = [
    fn {
        let string_acc = make_ref("");
        println("1 2 3 4 11");
        let x = test(1) + test(2) * test(3) + test(4);
        print(x);
        println("");
        println(" hello!");
        x = " hello!";
        println(x_str);
    }
];

// parse tests //
if true {} elif true {} elif true {};
if true {};
if true {} else {};
obj Test3 as test2 {};
obj Test4 {};

let test = 0;

println(loop {
    println(test);
    test = test + 1;
    if test > 5 {
        break "ending loop";
    }
});