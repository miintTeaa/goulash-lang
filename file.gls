let std = std();
let print = std.print;
let exit = std.exit;

let println = fn x {
    print(x);
    print("\n");
};
let test = fn x { print("" + x + " "); x };

let prev = obj Test1 {
    shout2 = fn a, b {
        print("shouting " + a);
        println(" and " + b);
    };
};
let test2 = obj Test2 as prev {
    shout3 = fn a, b, c {
        print("shouting " + a);
        print(" and " + b);
        println(" and also " + c)
    };
    a = 2;
};
test2.shout3("hello " + "world", false, true);
test2.shout2("hi", None);
println("foo foo ");
false or print("foo ");
true or print("bar ");
true and print("foo ");
false and print("bar ");
println("");
let list = [1, 2, obj Test { name = "hello"; }];
println(list);
println(list[2]);
list[2] = "hello";
println(list[2]);

let list2d = [
    ["00", "10", "20"],
    ["01", "11", "21"],
    ["02", "12", "22"],
];

println(list2d);

println("foo foo ");

if true {
    print("foo ");
} elif true {
    print("bar ");
} else {
    print("bar ");
};

if false {
    print("bar ");
} elif true {
    print("foo ");
} else {
    print("bar ");
};

println("");

let make_test = fn name, test {
    fn {
        println("running test " + name);
        test()
    }
};

let make_ref = fn x {
    obj Ref {
        inner = x;
        get = fn self { self.inner };
        set = fn self, to { self.inner = to; };
        map = fn self, f { self.inner = f(self.inner) };
        apply = fn self, f { f(self.inner) };
    }
};

let gen_add = fn added {
    fn x {
        x + added
    }
};

let x = make_ref("hello");
x:set(x:get() + " world!");
x:map(gen_add(1));
println(x:get());

let tests = [
    fn {
        let string_acc = make_ref("");
        println("1 2 3 4 11");
        let x = test(1) + test(2) * test(3) + test(4);
        print(x);
        println("");
        println(" hello!");
        x = " hello!";
        println(x_str);
    }
];

let test = 0;
let test_list = [];

println(loop {
    println(test);
    std.list.append(test_list, test);
    test = test + 1;
    if test > 5 {
        break "ending loop";
    }
});
println(test_list);
println(std.list.len(test_list));
std.list.remove(test_list, 0);
println(test_list);
println(std.list.len(test_list));


let new_vector = fn {
    obj Vector {
        inner = [];

        get = fn self, index {
            self.inner[index]
        };
        set = fn self, index, value {
            self.inner[index] = value
        };
        len = fn self {
            std.list.len(self.inner)
        };
        remove = fn self, index {
            std.list.remove(self.inner, index)
        };
        push = fn self, value {
            std.list.append(self.inner, value)
        };
        pop = fn self {
            std.list.remove(self.inner, std.list.len(self.inner) - 1)
        };
        last = fn self {
            self.inner[std.list.len(self.inner) - 1]
        };
    }
};

let vector = new_vector();
vector:push(0);
vector:push(1);
vector:push(obj Test {});
print(vector:len());
println(vector.inner);
println("1: " + vector:get(1));
println("last: " + vector:last());
println("popped "+vector:pop());
print(vector:len());
println(vector.inner);
println("1: " + vector:get(1));
println("last: " + vector:last());

// parse tests //
if true {} elif true {} elif true {};
if true {};
if true {} else {};
obj Test3 as test2 {};
obj Test4 {};

// builtin type annotations
// you'll never accidentally pass the wrong type to a function again!
// it erases the old identifier, to make sure you won't mistakenly use it as the wrong type
let x = 1;
x = "hello";
x_str = [];
x_str_list = fn {};
x_str_list_fn = obj Test {};
x_str_list_fn_Test = true;
println(x_str_list_fn_Test_bool);
// it even works with fields!
let ex = obj Example {
    y = 0;
};
ex.y = false;
println("wow! "+ ex.y_bool);
// assigning a variable or field to None just erases it though
// why would you need to keep track of Nones anyways?
x_str_list_fn_Test_bool = None;
// Internal error
println(x_str_list_fn_Test_bool_none);