program = { SOI ~ (stmt? ~ ";")* ~ EOI }

WHITESPACE = _{ WHITE_SPACE }
COMMENT    = _{ comment_ }
comment_   = @{ ("//" ~ (!"\n" ~ ANY)* ~ "\n") | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }

stmt     = { let_stmt | expr }
let_stmt = { "let" ~ ident ~ "=" ~ expr }

expr = { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix*)* }

prefix = _{
    not
  | neg
}
not    =  { "!" }
neg    =  { "-" }

infix      = _{
    plus
  | minus
  | mul
  | div
  | eq
  | not_eq
  | greater_eq
  | greater
  | lesser_eq
  | lesser
  | assign
  | or
  | and
}
plus       =  { "+" }
minus      =  { "-" }
mul        =  { "*" }
div        =  { "/" }
eq         =  { "==" }
not_eq     =  { "!=" }
greater_eq =  { ">=" }
greater    =  { ">" }
lesser_eq  =  { "<=" }
lesser     =  { "<" }
assign     =  { "=" }
or         =  { "or" }
and        =  { "and" }

postfix   = _{
    call_args
  | index
  | access
}
index     =  { "[" ~ expr ~ "]" }
call_args =  { "(" ~ expr? ~ ("," ~ expr)* ~ ","? ~ ")" }
access    =  { "." ~ ident }

primary   = _{
    "(" ~ expr ~ ")"
  | function
  | object
  | block
  | true
  | false
  | none
  | ident
  | float
  | integer
  | string
  | list_lit
}
float     = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
integer   = @{ ASCII_DIGIT+ }
ident     = @{ !keyword ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHA | ASCII_DIGIT | "_")* }
function  =  { "fn" ~ ident_lst? ~ block }
object    =  {
    "obj" ~ ident ~ ("as" ~ ident_lst)? ~ "{" ~ (ident ~ "=" ~ expr ~ ";")* ~ "}"
}
ident_lst =  { ident ~ ("," ~ ident)* ~ ","? }
true      =  { "true" }
false     =  { "false" }
none      =  { "None" }
list_lit  =  { "[" ~ expr? ~ ("," ~ expr)* ~ ","? ~ "]" }

keyword = _{
    "fn"
  | "true"
  | "false"
  | "obj"
  | "let"
  | "or"
  | "and"
  | "None"
  | "as"
}

// this reads as:
// match one [ " ]
// while doesn't match [ " ]:
// try to match [ \ ] followed by any character
// if that fails, try to match any character
string  = @{ "\"" ~ (!"\"" ~ (escaped | ANY))* ~ "\"" }
escaped = @{ "\\" ~ ANY }
block   =  { "{" ~ (stmt ~ ";")* ~ expr? ~ "}" }
